import config
import logging
import os
import re

from user_requests import User_SQLighter
from readManga import Parser
from markups import *
from states import AccStates

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage






#—É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
logging.basicConfig(level = logging.INFO)

#init
storage = MemoryStorage()
bot = Bot(token = config.API_TOKEN)
dp = Dispatcher(bot, storage = storage)

commands_str ="""
/addAccount - –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç readManga
/checkUnreads - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –≥–ª–∞–≤—ã
/changeAccount - –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/bookmarks - –í—ã–≤–µ—Å—Ç–∏ –≤—Å—é –º–∞–Ω–≥—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' —Å —Å—Å—ã–ª–∫–∞–º–∏
"""




#database
db_link = os.getenv('JAWSDB_URL')
db = User_SQLighter(db_link)


def split_list(l, num):
    x = 0
    n = len(l)
    for i in range(x, n, num):
        yield l[x:x+num]
        x += num


async def add_account(message):
    user_id = message.from_user.id
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –Ω–∞ readManga –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /exit –¥–ª—è –æ—Ç–º–µ–Ω—ã')
    await AccStates.login.set()



@dp.message_handler(state = AccStates.login)
async def add_username(message : types.Message,state:FSMContext):
    if message.text.replace(' ','') == '/exit':
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!')
        return -1
    else:

        user_id = message.from_user.id
        nickname = message.text
        db.add_username(user_id, nickname)
        await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –Ω–∞ readManga –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /exit –¥–ª—è –æ—Ç–º–µ–Ω—ã')
        await AccStates.password.set()

@dp.message_handler(state = AccStates.password)
async def add_username(message : types.Message,state:FSMContext):
    if message.text.replace(' ','') == '/exit':
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!')
        return -1
    else:
        user_id = message.from_user.id
        password = message.text
        db.add_password(user_id, password)
        db.add_account(user_id)
        db.commit()
        await bot.send_message(user_id, '–£—Å–ø–µ—à–Ω–æ!', reply_markup = main_menu)
        await state.finish()


        


async def check_unreads(message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    user_id = message.from_user.id
    if(not db.account_exists(user_id)):
        await bot.send_message(user_id, '–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç!', reply_markup = cng_acc_menu)
        return -1

    parser = Parser(user_id, db)
    await parser.check_unreads()
    await message.answer(f'–£ –≤–∞—Å {len(parser.unreads)} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:')
    splited_unreads = split_list(parser.unreads, 20)
    for l in splited_unreads:
        answer = ''
        for unread in l:
            answer += unread + '\n'
        await bot.send_message(message.from_user.id, answer, parse_mode = 'HTML')
    del parser



@dp.message_handler(commands = ['start'])
async def start_work(message : types.Message):
    user_id = message.from_user.id
    if(not db.user_exists(user_id)):
        try:
            db.add_user(user_id)
        except:
            await message.answer("–û—à–∏–±–∫–∞...")
            return -1
        await bot.send_message(user_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup = main_menu)
    else:
        await bot.send_message(user_id, "–í—ã —É–∂–µ –≤–æ—à–ª–∏...", reply_markup = main_menu)

@dp.message_handler(commands = ['support'])
async def show_supports(message : types.Message):
    res = """
    –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º
–∏–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–∏—à–∏—Ç–µ —Å—é–¥–∞:
@R_Swanson
    """

    await message.answer(res)


async def show_books(message):
    user_id = message.from_user.id
    if(not db.account_exists(user_id)):
        await bot.send_message(user_id, '–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç!', reply_markup = cng_acc_menu)
        return -1

    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    parser = Parser(user_id,db)
    bookmarks = parser.get_html_bookmarks()
    splited_bookmarks = split_list(bookmarks, 35)
    for l in splited_bookmarks:
        answer = ''
        for book in l:
            answer += book
        await bot.send_message(message.from_user.id, answer, parse_mode = "HTML")
    del parser

async def show_menu(message):
    await bot.send_message(message.from_user.id, "–ú–µ–Ω—é:", reply_markup =main_menu)

async def show_settings(message):
    await bot.send_message(message.from_user.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup =settings_menu)



command_switch = {
    '/changeAccount' : add_account,
    'üìù –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç': add_account,
    '/checkUnreads': check_unreads,
    'üìí –í—ã–≤–µ—Å—Ç–∏ –Ω–µ–¥–æ—á–∏—Ç–∞–Ω–Ω—ã–µ' : check_unreads,
    'üîñ –í—ã–≤–µ—Å—Ç–∏ –∑–∞–∫–ª–∞–¥–∫–∏': show_books,
    '/menu' : show_menu,
    'üìã –ú–µ–Ω—é': show_menu,
    '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏': show_settings,
    '/settings': show_settings,
}

@dp.message_handler()
async def handle(message : types.Message):
    try:
        await command_switch[message.text](message)
    except KeyError:
        pass












if __name__ == '__main__':
    executor.start_polling(dp,skip_updates=True)
